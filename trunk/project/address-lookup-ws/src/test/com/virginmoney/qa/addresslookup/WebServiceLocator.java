package com.virginmoney.qa.addresslookup;

import com.virginmoney.addresslookup.messages.AddressLookupService;
import org.apache.log4j.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.util.Iterator;

/**
 * *****************************************************************************
 * Class         :  WebServiceLocator
 * Functionality :  Creates a messaging object to connect to a webservice.
 * Author(s)     :  woodsn
 * Creation Date :  23-Nov-2007
 * Copyright     :  Virgin Money Ltd.
 * ******************************************************************************
 */

public class WebServiceLocator {

    private static final Logger logger = Logger.getLogger(WebServiceLocator.class);

    /*
   Variables to define the services. There are four items for each service :-

       ServiceClassName       - this is the class name of the Service object to be returned. The package
                                name must match that specified in the wsimport step of the ant task which generates the code.

       ServiceNameSpace       - this is the namespace of the Service and must match the value of the targetNamespace element
                                in the wsdl from which the classes were generated (the value can also be obtained from the code generated by wsimport)

       ServiceName            - this is the name of the Service and must match the value of the <service name= element
                                in the wsdl from which the classes were generated (the value can also be obtained from the code generated by wsimport)

       ServiceURLPropertyName - this is the System property which will contain the full runtime URL of the service, e.g
                                http://localhost:8080/MIService/miservice?wsdl

    */

    /**
     * MI Service classname.
     */
    private static String addressLookupServiceClassName = "com.virginmoney.addresslookup.messages.AddressLookupService";

    /**
     * MI service namespace.
     */
    private static String addressLookupServiceNameSpace = "http://www.virginmoney.com/vmDataTypes/";

    /**
     * MI Service name.
     */
    private static String addressLookupServiceName = "AddressLookupService";

    /**
     * System property which contains the full runtime URL of the MI service wsdl in the form http://localhost:8080/MIService/miservice?wsdl .
     */
    public static String addressLookupServiceURLPropertyName = "service.addresslookup.wsdl.url";


    /**
     * private constructor - this class cannot be instantiated
     */
    private WebServiceLocator() {

    }

    /**
     * Creates an instance of the AddressLookupService class which will access a deployed MI service. The url of the service must be defined
     * in the system property defined by WebServiceLocator.addressLookupServiceURLPropertyName , e.g http://localhost:8080/MIService/miservice?wsdl
     *
     * @return an instance of the AddressLookupService class which will access a deployed MI service.
     * @throws Exception
     */
    public static AddressLookupService getAddressLookupService() throws Exception {

        return (AddressLookupService) getWebService(addressLookupServiceClassName, addressLookupServiceName, addressLookupServiceURLPropertyName, addressLookupServiceNameSpace);

    }

    /**
     * Creates an instance of a Service referring to a deployed web service.
     *
     * @param serviceClassName       the fully qualified class name of the object to be returned.
     * @param serviceName            the service name.
     * @param serviceURLPropertyName the name of System property which contains the full runtime URL of the MI service wsdl.
     * @param serviceNameSpace       the namespace of the Service
     * @return a Service object referring to the deployed web service described in the input values.
     * @throws Exception
     */

    private static Service getWebService(String serviceClassName, String serviceName, String serviceURLPropertyName, String serviceNameSpace) throws Exception {

        logger.debug("getWebService() started");
        logger.debug("            serviceClassName=" + serviceClassName);
        logger.debug("                 serviceName=" + serviceName);
        logger.debug("      serviceURLPropertyName=" + serviceURLPropertyName);
        logger.debug("            serviceNameSpace=" + serviceNameSpace);

        // get the System property which contains the full url of the running service.
        // The url should be in the form  http://localhost:8080/MIService/miservice?wsdl
        //
        String serviceURLPropertyValue = System.getProperty(serviceURLPropertyName);
        if (serviceURLPropertyValue == null) {
            throw new Exception("WebServiceLocator cannot find System property named " + serviceURLPropertyName +
                    "  for service name=" + serviceName +
                    "  and service class=" + serviceClassName);
        }
        logger.debug("     serviceURLPropertyValue=" + serviceURLPropertyValue);

        // create an instance of the Service class required
        Class serviceClass = Class.forName(serviceClassName);
        logger.debug("                serviceClass=" + serviceClass.getName());

        // Use the service class, url from the system property, the service name and namespace to construct
        // the arguments required by the Service constructor
        URL baseUrl = serviceClass.getResource(".");
        URL serviceUrl = new URL(baseUrl, serviceURLPropertyValue);
        QName serviceQName = new QName(serviceNameSpace, serviceName);
        logger.debug("                  serviceUrl=" + serviceUrl);
        logger.debug("                serviceQName=" + serviceQName);

        // use Reflection to get a constructor for the Service class
        Constructor serviceConstructor = serviceClass.getConstructor(URL.class, QName.class);
        logger.debug("          serviceConstructor=" + serviceConstructor);

        // call the constructor to get an instance of the class required
        return (Service) serviceConstructor.newInstance(serviceUrl, serviceQName);

    }

    public static void debugService(Service service) {
        logger.debug(" ");
        logger.debug("                     service=" + service);
        logger.debug("            getServiceName()=" + service.getServiceName());
        logger.debug("   getWSDLDocumentLocation()=" + service.getWSDLDocumentLocation());
        logger.debug("              getLocalPart()=" + service.getServiceName().getLocalPart());
        logger.debug("           getNamespaceURI()=" + service.getServiceName().getNamespaceURI());

        Iterator portIterator = service.getPorts();
        while (portIterator.hasNext()) {
            QName port = (QName) portIterator.next();
            logger.debug("         port.getLocalPart()=" + port.getLocalPart());
            logger.debug("      port.getNamespaceURI()=" + port.getNamespaceURI());
            logger.debug("            port.getPrefix()=" + port.getPrefix());
        }
    }

}
