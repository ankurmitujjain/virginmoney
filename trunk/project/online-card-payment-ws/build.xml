<project name="online-card-payment-ws" basedir="." default="build">

	<!-- Ant build script for the address lookup addresslookup -->


	<!-- user-specific properties -->
	<property file="${user.home}/etc/env.build.properties" />

	<!-- import the build file which predefines all the standard properties -->
	<property name="antscripts.dir" value="${env.dev.root.dir}/common/antscripts" />
	<property file="${antscripts.dir}/common.build.properties" />

	<!-- import all the thirdparty library definitions -->
	<property name="common.library.dir" value="${env.dev.root.dir}/thirdparty/libraries" />
	<property file="${common.library.dir}/common.libraries.properties" />


	<property name="war.name" value="${ant.project.name}" />

	<!-- import vm deployment and jboss control -->
	<import file="${antscripts.dir}/ant-vm-deployment.xml" />


	<path id="required.libraries">
		<fileset dir="${metro.lib}">
			<include name="*.jar" />
			<exclude name="j2ee.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${jboss.lib}">
			<include name="**/*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${dozer.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${commons-lang.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${commons-logging.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${commons-beanutils.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${commons-collections.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
        <fileset dir="${spring256.lib}">
            <include name="**/*.jar"/>
        </fileset>
		<fileset dir="${log4j.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${groovy.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${hibernate.lib}">
			<include name="**/*.jar" />
		</fileset>
        <fileset dir="${commons-codec.lib}">
             <include name="**/*.jar"/>
         </fileset>        
        <fileset dir="${springmodules.lib}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${quartz161.lib}">
            <include name="**/*.jar"/>
        </fileset>
	</path>

	<!-- master classpath - includes common libraries and configuration elements -->
	<path id="master.classpath">
		<path refid="required.libraries" />
		<pathelement path="${build.main.dir}" />
		<pathelement path="${conf.main.dir}" />
	</path>

	<!-- test classpath - includes common libraries and configuration elements plus test version of configuration elements -->
	<path id="test.classpath">
		<pathelement path="${conf.test.dir}" />
		<pathelement path="${build.test.dir}" />
		<path refid="master.classpath" />
		<fileset dir="${junit.home}">
			<include name="**/*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${mockito.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- builds and tests the project -->
	<target name="build" depends="build-no-tests, test-all, javadoc" />

	<target name="build-no-tests" depends="clean, assert-dependencies, wsdl-gen-all, compile, create-war" description="builds the project without tests" />

	<target name="deploy-local-jboss" depends="build-no-tests,test-junit" description="Deploy application to local web server">
		<!-- jboss.local.deploy.dir should be defined in your local env.build.properties -->
		<copy verbose="${verbose}" file="${deploy.dir}/${war.name}.war" todir="${jboss.local.deploy.dir}" preservelastmodified="false">
		</copy>
	</target>

	<target name="deploy-local-jboss-no-tests" depends="build-no-tests" description="Deploy application to local web server">
		<copy verbose="${verbose}" file="${deploy.dir}/${war.name}.war" todir="${jboss.local.deploy.dir}" preservelastmodified="false">
		</copy>
	</target>

	<target name="clean" depends="clean-dist" description="Clean out the build and deployment directories">
		<ant antfile="${antscripts.dir}/ant-clean.xml" inheritall="true" inheritrefs="true" />
	</target>

	<target name="clean-build" description="Clean out the build and deployment directories">
		<ant antfile="${antscripts.dir}/ant-clean.xml" inheritall="true" inheritrefs="true" target="clean-build" />
	</target>
	
	<target name="clean-dist" description="Clean out the distribution directory">
		<delete dir="${distribution.dir}" failonerror="false" />
	</target>	

	<target name="compile" description="Compiles all source java files">
		<ant antfile="${antscripts.dir}/ant-compile.xml" inheritall="true" inheritrefs="true" />
		<copy verbose="${verbose}" todir="${build.main.dir}" preservelastmodified="false">
			<fileset dir="${src.dir}">
				<include name="**/*.groovy" />
			</fileset>
		</copy>
	</target>

    <!-- WDSL to Java -->
    <target name="wsdl-gen-all" description="Generate and compile the java source files from the WSDL">
        <!-- clean the generated stuff -->
        <delete dir="${src.generated.dir}"/>
        <mkdir dir="${src.generated.dir}" />
        <mkdir dir="${build.main.dir}"/>

        <antcall target="wsdl-gen-tlg" />
    	<antcall target="wsdl-gen-online-card-payment-ws"/>
    	<antcall target="wsdl-gen-alert-service-ws"/>
     </target>

    <!-- WSDL gen for the two Logic Group APIs -->
    <target name="wsdl-gen-tlg" description="Generates the wsdl for this service">
         <ant antfile="${antscripts.dir}/ant-wsimport.xml" inheritall="true" inheritrefs="true">
             <property name="wsdl.location"        value="${conf.dir}/wsdl/PaymentAPI.wsdl"/>
             <property name="java.package.name"    value="com.logicgroup.basic.service.messages"/>
         </ant>
         <ant antfile="${antscripts.dir}/ant-wsimport.xml" inheritall="true" inheritrefs="true">
             <property name="wsdl.location"        value="${conf.dir}/wsdl/ExtendedPaymentAPI.wsdl"/>
             <property name="java.package.name"    value="com.logicgroup.extended.service.messages"/>
         </ant>
     </target>

    <!-- Wsdl gen for this Online Card Payment service -->
    <target name="wsdl-gen-online-card-payment-ws" description="Generates the wsdl for this online-card-payment-ws">
        <ant antfile="${antscripts.dir}/ant-wsimport.xml" inheritall="true" inheritrefs="true">
            <property name="wsdl.location"        value="${onlinecardpayment.wsdl.location}"/>
            <property name="java.package.name"    value="com.virginmoneygiving.cardpayment.service.messages"/>
        </ant>
    </target>

    <!-- Wsdl gen for the Alert service -->
    <target name="wsdl-gen-alert-service-ws" description="Generates the wsdl for the alert-service-ws">
        <ant antfile="${antscripts.dir}/ant-wsimport.xml" inheritall="true" inheritrefs="true">
            <property name="wsdl.location"        value="${alertservice.wsdl.location.web}"/>
            <property name="java.package.name"    value="com.virginmoneygiving.alert.service.messages"/>
        </ant>
    </target>


    <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
        <classpath refid="master.classpath"/>
    </taskdef>


	<target name="create-war" description="This target creates the deployable WAR file">

		<mkdir dir="${deploy.dir}" />
		<war destfile="${deploy.dir}/${war.name}.war" webxml="${conf.main.dir}/WEB-INF/web.xml">
			<!-- take all the compiled code from the build folder, but not the test code -->
			<classes dir="${build.main.dir}" />

			<!-- include the main config entries but not the test ones -->
			<zipfileset dir="${conf.main.dir}">
				<include name="**/*.*" />
				<exclude name="**/*.jar" />
				<exclude name="web.xml" />
				<!-- already referenced above -->
			</zipfileset>
		</war>
	</target>

	<target name="Intellij-local-junit-config" description="Copies configuration files to allow junit to be run from the intellij 'run' command">
		<setproxy proxyhost="${env.proxy.default.host}" proxyport="${env.proxy.default.port}" nonproxyhosts="${env.proxy.default.nonproxyhosts}" />
		<echo message="proxyhost=${env.proxy.default.host}" />
		<echo message="proxyport= ${env.proxy.default.port}" />
		<echo message="nonproxyhosts=${env.proxy.default.nonproxyhosts}" />
		<echo message="wsdl=${env.freedomfinance.wsdl.runtime}" />
	</target>


	<target name="javadoc" description="Runs Javadoc" >
		<if>
			<not><equals arg1="${skip.javadoc}" arg2="true"/></not>
			<then>
				<ant antfile="${antscripts.dir}/ant-javadoc.xml" target="javadoc-html" inheritall="true" inheritrefs="true">
					<property name="javadoc.title" value="${ant.project.name}" />
					<property name="javadoc.verbose" value="false" />
				</ant>
			</then>
			<else>
				<echo message="Property 'skip.javadoc' is set to true, skipping javadoc"/>
			</else>
		</if>
	</target>

	<target name="test-all">
		<if>
			<not><equals arg1="${skip.tests}" arg2="true"/></not>
			<then>
      	<if>
      		<not><equals arg1="${skip.cobertura}" arg2="true"/></not>
					<then>
		        <antcall target="test-cobertura"/>
					</then>
					<else>
						<echo message="Property 'skip.cobertura' is set to true, skipping cobertura processing"/>
		        <antcall target="test-junit"/>
					</else>
				</if>
			</then>
			<else>
				<echo message="Property 'skip.tests' is set to true, skipping tests"/>
			</else>
		</if>
    <antcall target="test-checkstyle"/>
    <antcall target="test-findbugs"/>
	</target>

	<target name="test-cobertura" description="Runs the Junit tests with Cobertura analysis" depends="compile">
		<if>
			<not><equals arg1="${skip.cobertura}" arg2="true"/></not>
			<then>
				<ant antfile="${antscripts.dir}/ant-cobertura.xml" inheritall="true" inheritrefs="true"/>
			</then>
			<else>
				<echo message="Property 'skip.cobertura' is set to true, skipping cobertura tests"/>
			</else>
		</if>
	</target>

	<target name="test-junit" description="Runs the Junit tests" depends="compile">
		<if>
			<not><equals arg1="${skip.tests}" arg2="true"/></not>
			<then>
				<ant antfile="${antscripts.dir}/ant-junit.xml" inheritall="true" inheritrefs="true" />
			</then>
			<else>
				<echo message="Property 'skip.tests' is set to true, skipping tests"/>
			</else>
		</if>				
	</target>

	<target name="test-checkstyle" description="Runs checkstyle over the source to check the coding standards">
		<if>
			<not><equals arg1="${skip.checkstyle}" arg2="true"/></not>
			<then>
				<ant antfile="${antscripts.dir}/ant-checkstyle.xml" inheritall="true" inheritrefs="true" />
			</then>
			<else>
				<echo message="Property 'skip.checkstyle' is set to true, skipping checkstyle analysis"/>
			</else>
		</if>				
	</target>

	<target name="test-findbugs" description="Runs findbugs over the source to check the coding bugs">
		<if>
			<not><equals arg1="${skip.findbugs}" arg2="true"/></not>
			<then>
				<ant antfile="${antscripts.dir}/ant-findbugs.xml" inheritall="true" inheritrefs="true" />
			</then>
			<else>
				<echo message="Property 'skip.findbugs' is set to true, skipping findbugs analysis"/>
			</else>
		</if>				
	</target>

	<!-- a default fitnesse target. Provide the name of the fitnesse page to test with -->
	<target name="test-fitnesse" description="Runs the Fitnesse tests" unless="skip.fitnesse">
		<ant antfile="${antscripts.dir}/ant-fitnesse.xml" inheritall="true" inheritrefs="true">
			<property name="fitnesse.test.page" value="a fitnesse page" />
		</ant>
	</target>

	<target name="test-qalab" description="Runs qalab against the test results to record the metrics" unless="skip.qalab">
		<ant antfile="${antscripts.dir}/ant-qalab.xml" inheritall="true" inheritrefs="true" />
	</target>

	<target name="echoproperties">
		<echo message="==============================================================================================" />
		<echo message=" Start of properties for project : '${ant.project.name}'" />
		<echo message="                         basedir : '${basedir}' " />
		<echo message="                        ant file : '${ant.file}'" />
		<echo message="==============================================================================================" />
		<echoproperties />
		<echoproperties />
		<echo message="==============================================================================================" />
		<property name="print.test.classpath" refid="test.classpath" />
		<echo message="                        print.test.classpath : '${print.test.classpath}'" />
		<echo message="==============================================================================================" />
		<echo message=" End of properties for project : '${ant.project.name}' " />
		<echo message="==============================================================================================" />
	</target>


	<!-- BUILD DISTRIBUTION BUNDLE -->

	<target name="dist" depends="clean-dist, build, create-vm-distribution, copy-deployment-instruction, copy-distribution-jboss-deployables, 
		copy-distribution-external-configuration, copy-distribution-jboss-conf, copy-distribution-sql-scripts, vm-distribution-import-lib-virgin, create-distribution-tar" description="Creates distribution tar." />

	<target name="create-vm-distribution" description="Create distribution release structure.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution.xml" target="vm-distribution" inheritall="true" inheritrefs="true" />
	</target>

	<target name="copy-distribution-jboss-deployables" description="Copy war for to distribution release structure.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution.xml" target="copy-jboss-deployables" inheritall="true" inheritrefs="true" />
	</target>

	<target name="copy-distribution-jboss-conf" description="Copy configuration files required in jboss -> deploy folder.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution.xml" target="copy-jboss-conf" inheritall="true" inheritrefs="true"/>
	</target>

	<target name="copy-distribution-sql-scripts" description="Copy sql scripts to distribution release structure.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution.xml" target="copy-sql-scripts" inheritall="true" inheritrefs="true" />
	</target>

	<target name="copy-distribution-external-configuration" description="Copy external configurations to distribution release structure.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution.xml" target="copy-external-configuration" inheritall="true" inheritrefs="true"/>
	</target>

	<target name="copy-deployment-instruction" description="Copy file that contains tar deployment instructions.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution.xml" target="copy-readme" inheritall="true" inheritrefs="true" />
	</target>

	<target name="create-distribution-tar" description="Create distribution tar.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution.xml" target="create-gzip" inheritall="true" inheritrefs="true" />
	</target>

	<target name="vm-distribution-import-lib-virgin" description="Import project specific dependencies.">
		<ant antfile="${antscripts.dir}/ant-vm-distribution-lib-virgin-import.xml" target="copy-online-card-payment-ws-lib-virgin" inheritall="true" inheritrefs="true" />
	</target>
	
	
	<!-- ASSERT THAT OUR DEPENDENCIES ARE AVAILABLRE -->


	<!-- ASSERT THAT WE'RE DEPLOYED OKAY -->

	<!-- overridden as we have a real database -->
	<target name="assert-mysql-deployment" description="Assert that the component's database is available">
		<mysql-run-sql url="${onlinecardpayment.ds.url}" username="${onlinecardpayment.ds.username}" 
			password="${onlinecardpayment.ds.password}" sql="use ${onlinecardpayment.ds.dbname};" />
	</target>
		
	<!-- DEPLOY THIS COMPONENT -->

	<target name="deploy-dist" depends="
		unpack-distribution, 
		deploy-database, 
		deploy-libraries, 
		deploy-external-config, 
		deploy-jboss-config, 
		deploy-jboss-deployables"
		description="Deploy the component, takes the tar ball and deploys it properly into JBoss and MySQL">
	</target>
	
	<!-- overridden as we have a real database -->	
	<target name="deploy-database" description="Execute the component's database initialisation scripts">
		<deploy-database-from-files dbName="${onlinecardpayment.ds.dbname}" 
			dbusername="${onlinecardpayment.ds.username}" dbpassword="${onlinecardpayment.ds.password}"/>
	</target>	
	
	<!-- overridden as we have a datasource -->	
	<target name="filter-jboss-deployables">
		<filter-jboss-datasource dsFile="${distribution.jboss.deploy-virgin.dir}/onlinecardpayment-ds.xml" 
			dsUrl="${onlinecardpayment.ds.url}" 
			dsUsername="${onlinecardpayment.ds.username}" 
			dsPassword="${onlinecardpayment.ds.password}" />
	</target>
	
</project>
