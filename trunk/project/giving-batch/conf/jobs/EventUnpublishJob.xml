<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

	<description>
		The purpose of this daily batch job is to recognise events(active events) with publish status 
		and to be expired today	and to then initiate the unpublish process to make them inactive.
	</description>

	<import resource="classpath:/property-context.xml" />

	<!-- Job Configuration - Start-->
	<bean id="eventUnpublishJob" parent="simpleJob">
		<property name="name" value="Event Unpublish Job" />
		<property name="steps">
			<list>
				<bean id="step1" parent="givingSkipLimitStep">
					<property name="itemReader" ref="eventUnpublishItemReader" />
					<property name="itemProcessor" ref="compositeItemProcessor" />
					<property name="itemWriter" ref="eventUnpublishXmlWriter" />
					<property name="listeners">
						<list>
                            <ref bean="eventUnpublishItemProcessor" />
                        </list>
					</property>
					<property name="commitInterval" value="1000" />
					<property name="skipLimit" value="3" />
				</bean>
			</list>
		</property>
	</bean>
	<!-- Job Configuration - End-->


	<bean class="org.springframework.batch.core.scope.StepScope" />

    <!-- JPAPagingItemReader - Start-->
	<bean id="eventUnpublishItemReader" scope="step"
		class="org.springframework.batch.item.database.JpaPagingItemReader">
		<property name="entityManagerFactory" ref="givingEntityManagerFactory" />
		<property name="queryString"
			value="select e from Event e where e.eventStatus='PUB'
			          and (e.eventDatetime is not null and STR_TO_DATE(CONCAT(DATE(e.eventDatetime),' 23:59:59'), '%Y-%m-%d %H:%i:%s') &lt; STR_TO_DATE('#{jobParameters[cutOffDate]}', '%d-%m-%Y %H:%i:%s'))" />
		<property name="pageSize" value="1000" />
	</bean>

	<!-- JPAPagingItemReader - End-->

	<!-- Composite Item Processor Configuration - Start -->
	<bean id="compositeItemProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor">
		<property name="itemProcessors">
			<list>
				<ref bean="eventUnpublishItemProcessor" />
				<ref bean="eventTransformer" />
			</list>
		</property>
	</bean>

	<bean id="eventUnpublishItemProcessor"
		class="com.virginmoneygiving.givingbatch.processor.EventUnpublishProcessor">
		<property name="givingService" ref="givingService" />
		<property name="batchDelegate" ref="batchDelegate" />
		<property name="indexerEventService" ref="indexerEventService"></property>
        <property name="givingBatchExtServiceLocator" ref="givingBatchExtServiceLocator"/>
    </bean>
	
	<bean id="eventTransformer"
		class="com.virginmoneygiving.givingbatch.transformer.EventTransformer"/>
	<!-- Composite Item Processor Configuration - End -->
	
	<!-- XMLItemWriter Configuration -->
	<bean id="eventUnpublishXmlWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
		<property name="resource" value="file:${givingbatch.output.folder}/eventUnpublish.xml" />
		<property name="marshaller" ref="eventUnpublishMarshallingSerializer" />
		<property name="rootTagName" value="eventUnpublishBatch" />
		<property name="overwriteOutput" value="true" />
	</bean>

	<!-- XStreamMarshaller Configuration - Start -->
	<bean class="org.springframework.oxm.xstream.XStreamMarshaller"
		id="eventUnpublishMarshallingSerializer">
		<property name="aliases" ref="aliases" />
	</bean>

	<util:map id="aliases">
		<entry key="event" value="com.virginmoneygiving.givingbatch.domain.EventSummary" />
		<entry key="id" value="java.lang.String" />
		<entry key="name" value="java.lang.String" />
		<entry key="description" value="java.lang.String"/>
		<entry key="eventTimeText" value="java.lang.String" />
		<entry key="eventDatetime" value="java.sql.Timestamp" />
		<entry key="openDate" value="java.sql.Timestamp" />
		<entry key="expiryDate" value="java.sql.Timestamp" />
		<entry key="location" value="java.lang.String"/>
		<entry key="eventStatus" value="java.lang.String" />
	</util:map>
	<!-- XStreamMarshaller Configuration - End -->

</beans>