
package com.virginmoney.glis.messages;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for EventProcessingTypes.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="EventProcessingTypes">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="REGISTER-CHARITY"/>
 *     &lt;enumeration value="MAINTAIN-CHARITY"/>
 *     &lt;enumeration value="CHARITY-REGISTRATION-FEE-PAYMENT-INITIATED"/>
 *     &lt;enumeration value="CHARITY-REGISTRATION-FEE-PAYMENT-WAIVED"/>
 *     &lt;enumeration value="TRANSACTION-CHARGE-PAID"/>
 *     &lt;enumeration value="WEB-DONATIONS-PAYMENT-INITIATED"/>
 *     &lt;enumeration value="WEB-DONATIONS-PAYMENT-FAILED"/>
 *     &lt;enumeration value="GIFT-AID-CLAIMED"/>
 *     &lt;enumeration value="TRANSITIONAL-RELIEF-CLAIMED"/>
 *     &lt;enumeration value="CLOSE-CHARITY"/>
 *     &lt;enumeration value="BAC-PAYMENT-DUE"/>
 *     &lt;enumeration value="WEB-DONATIONS-PAYMENT-COLLECTED"/>
 *     &lt;enumeration value="TRANSACTION-FEE-PAID"/>
 *     &lt;enumeration value="BAC-PAYMENT-COLLECTED"/>
 *     &lt;enumeration value="TRANSITIONAL-RELIEF-RECEIVED"/>
 *     &lt;enumeration value="GIFT-AID-RECEIVED"/>
 *     &lt;enumeration value="CHARITY-REGISTRATION-FEE-PAYMENT-COLLECTED"/>
 *     &lt;enumeration value="PAYMENT-TO-CHARITY-PAYMENT-SETTLED"/>
 *     &lt;enumeration value="WEB-EVENT-REGISTRATION-FEE-PAYMENT-INITIATED"/>
 *     &lt;enumeration value="WEB-EVENT-REGISTRATION-FEE-PAYMENT-FAILED"/>
 *     &lt;enumeration value="WEB-EVENT-REGISTRATION-FEE-PAYMENT-COLLECTED"/>
 *     &lt;enumeration value="WEB-EVENT-REGISTRATION-TRANSACTION-CHARGE-PAID"/>
 *     &lt;enumeration value="WEB-EVENT-REGISTRATION-TRANSACTION-FEE-PAID"/>
 *     &lt;enumeration value="WEB-REGULAR-DONATIONS-PAYMENT-INITIATED"/>
 *     &lt;enumeration value="WEB-REGULAR-DONATIONS-PAYMENT-FAILED"/>
 *     &lt;enumeration value="WEB-REGULAR-DONATIONS-PAYMENT-COLLECTED"/>
 *     &lt;enumeration value="WEB-REGULAR-DONATIONS-TRANSACTION-CHARGE-PAID"/>
 *     &lt;enumeration value="WEB-REGULAR-DONATIONS-TRANSACTION-FEE-PAID"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "EventProcessingTypes")
@XmlEnum
public enum EventProcessingTypes {

    @XmlEnumValue("REGISTER-CHARITY")
    REGISTER_CHARITY("REGISTER-CHARITY"),
    @XmlEnumValue("MAINTAIN-CHARITY")
    MAINTAIN_CHARITY("MAINTAIN-CHARITY"),
    @XmlEnumValue("CHARITY-REGISTRATION-FEE-PAYMENT-INITIATED")
    CHARITY_REGISTRATION_FEE_PAYMENT_INITIATED("CHARITY-REGISTRATION-FEE-PAYMENT-INITIATED"),
    @XmlEnumValue("CHARITY-REGISTRATION-FEE-PAYMENT-WAIVED")
    CHARITY_REGISTRATION_FEE_PAYMENT_WAIVED("CHARITY-REGISTRATION-FEE-PAYMENT-WAIVED"),
    @XmlEnumValue("TRANSACTION-CHARGE-PAID")
    TRANSACTION_CHARGE_PAID("TRANSACTION-CHARGE-PAID"),
    @XmlEnumValue("WEB-DONATIONS-PAYMENT-INITIATED")
    WEB_DONATIONS_PAYMENT_INITIATED("WEB-DONATIONS-PAYMENT-INITIATED"),
    @XmlEnumValue("WEB-DONATIONS-PAYMENT-FAILED")
    WEB_DONATIONS_PAYMENT_FAILED("WEB-DONATIONS-PAYMENT-FAILED"),
    @XmlEnumValue("GIFT-AID-CLAIMED")
    GIFT_AID_CLAIMED("GIFT-AID-CLAIMED"),
    @XmlEnumValue("TRANSITIONAL-RELIEF-CLAIMED")
    TRANSITIONAL_RELIEF_CLAIMED("TRANSITIONAL-RELIEF-CLAIMED"),
    @XmlEnumValue("CLOSE-CHARITY")
    CLOSE_CHARITY("CLOSE-CHARITY"),
    @XmlEnumValue("BAC-PAYMENT-DUE")
    BAC_PAYMENT_DUE("BAC-PAYMENT-DUE"),
    @XmlEnumValue("WEB-DONATIONS-PAYMENT-COLLECTED")
    WEB_DONATIONS_PAYMENT_COLLECTED("WEB-DONATIONS-PAYMENT-COLLECTED"),
    @XmlEnumValue("TRANSACTION-FEE-PAID")
    TRANSACTION_FEE_PAID("TRANSACTION-FEE-PAID"),
    @XmlEnumValue("BAC-PAYMENT-COLLECTED")
    BAC_PAYMENT_COLLECTED("BAC-PAYMENT-COLLECTED"),
    @XmlEnumValue("TRANSITIONAL-RELIEF-RECEIVED")
    TRANSITIONAL_RELIEF_RECEIVED("TRANSITIONAL-RELIEF-RECEIVED"),
    @XmlEnumValue("GIFT-AID-RECEIVED")
    GIFT_AID_RECEIVED("GIFT-AID-RECEIVED"),
    @XmlEnumValue("CHARITY-REGISTRATION-FEE-PAYMENT-COLLECTED")
    CHARITY_REGISTRATION_FEE_PAYMENT_COLLECTED("CHARITY-REGISTRATION-FEE-PAYMENT-COLLECTED"),
    @XmlEnumValue("PAYMENT-TO-CHARITY-PAYMENT-SETTLED")
    PAYMENT_TO_CHARITY_PAYMENT_SETTLED("PAYMENT-TO-CHARITY-PAYMENT-SETTLED"),
    @XmlEnumValue("WEB-EVENT-REGISTRATION-FEE-PAYMENT-INITIATED")
    WEB_EVENT_REGISTRATION_FEE_PAYMENT_INITIATED("WEB-EVENT-REGISTRATION-FEE-PAYMENT-INITIATED"),
    @XmlEnumValue("WEB-EVENT-REGISTRATION-FEE-PAYMENT-FAILED")
    WEB_EVENT_REGISTRATION_FEE_PAYMENT_FAILED("WEB-EVENT-REGISTRATION-FEE-PAYMENT-FAILED"),
    @XmlEnumValue("WEB-EVENT-REGISTRATION-FEE-PAYMENT-COLLECTED")
    WEB_EVENT_REGISTRATION_FEE_PAYMENT_COLLECTED("WEB-EVENT-REGISTRATION-FEE-PAYMENT-COLLECTED"),
    @XmlEnumValue("WEB-EVENT-REGISTRATION-TRANSACTION-CHARGE-PAID")
    WEB_EVENT_REGISTRATION_TRANSACTION_CHARGE_PAID("WEB-EVENT-REGISTRATION-TRANSACTION-CHARGE-PAID"),
    @XmlEnumValue("WEB-EVENT-REGISTRATION-TRANSACTION-FEE-PAID")
    WEB_EVENT_REGISTRATION_TRANSACTION_FEE_PAID("WEB-EVENT-REGISTRATION-TRANSACTION-FEE-PAID"),
    @XmlEnumValue("WEB-REGULAR-DONATIONS-PAYMENT-INITIATED")
    WEB_REGULAR_DONATIONS_PAYMENT_INITIATED("WEB-REGULAR-DONATIONS-PAYMENT-INITIATED"),
    @XmlEnumValue("WEB-REGULAR-DONATIONS-PAYMENT-FAILED")
    WEB_REGULAR_DONATIONS_PAYMENT_FAILED("WEB-REGULAR-DONATIONS-PAYMENT-FAILED"),
    @XmlEnumValue("WEB-REGULAR-DONATIONS-PAYMENT-COLLECTED")
    WEB_REGULAR_DONATIONS_PAYMENT_COLLECTED("WEB-REGULAR-DONATIONS-PAYMENT-COLLECTED"),
    @XmlEnumValue("WEB-REGULAR-DONATIONS-TRANSACTION-CHARGE-PAID")
    WEB_REGULAR_DONATIONS_TRANSACTION_CHARGE_PAID("WEB-REGULAR-DONATIONS-TRANSACTION-CHARGE-PAID"),
    @XmlEnumValue("WEB-REGULAR-DONATIONS-TRANSACTION-FEE-PAID")
    WEB_REGULAR_DONATIONS_TRANSACTION_FEE_PAID("WEB-REGULAR-DONATIONS-TRANSACTION-FEE-PAID");
    private final String value;

    EventProcessingTypes(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EventProcessingTypes fromValue(String v) {
        for (EventProcessingTypes c: EventProcessingTypes.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
