package com.virginmoney.addresslookup.business;

import org.apache.log4j.Logger;
import org.apache.commons.lang.StringUtils;

/**
 * @author woodsn
 *         <p/>
 *         Copyright     :  Virgin Money Ltd.
 */
public abstract class AbstractAddress {

    private static Logger logger = Logger.getLogger(AbstractAddress.class);
    protected AddressSearchParameters searchParameters;
    protected String addressLine1;
    protected String addressLine2;
    protected String postcode;
    protected PAFData pafData;

    public AbstractAddress(AddressSearchParameters searchParameters,
                           String addressLine1,
                           String addressLine2,
                           String postcode) {
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.postcode = postcode;
        pafData = null;
        this.searchParameters = searchParameters;
    }

    public AbstractAddress(AddressSearchParameters searchParameters,
                           String addressLine1,
                           String addressLine2,
                           String postcode,
                           PAFData pafData) {
        this(searchParameters,addressLine1, addressLine2, postcode);
        this.pafData = pafData;
    }

    public String getAddressLine1() {
         return addressLine1;
     }

    public String getAddressLine2() {
        return addressLine2;
    }

    public String getPostcode() {
        return postcode;
    }

    /**
	 * @param addressLine1 the addressLine1 to set
	 */
	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}

	public abstract String getPicklistEntry();

    /**
     * Utility method to append a String to a StringBuffer, with a comma if the buffer is not empty.
     *
     * @param buffer
     */
    protected void appendToBuffer(StringBuffer buffer, String appendage) {
        if (StringUtils.isBlank(appendage)) {
            return;
        }
        if (buffer.length() > 0) {
            buffer.append(", ");
        }
        buffer.append(appendage);
    }

    public PAFData getPafData() {
        if (searchParameters != null &&
                searchParameters.returnPAFData()) {
            return pafData;
        }
        else
        {
            return null;
        }

    }

    public boolean isMatchesSearchBuilding() {
        if (searchParameters  == null || StringUtils.isBlank(searchParameters.getSearchBuilding())) {
            return false;
        }

        // Search the address data for the building name
        // If paf data is present then use it, because sometimes building names and road names are similar
        // which causes 'false positives'. E.g. searching for 'Mill' might match against 'Mill House, Mill Road' but
        // also against 'Other House, Mill Road' , which is less correct.
        // Note also that house numbers have to match exactly, otherwise. e.g searching for number 6 will match onto 16
        String searchString = searchParameters.getSearchBuilding();
        if (pafData != null){
            return  (pafData.getSubBuildingName() != null && StringUtils.containsIgnoreCase(pafData.getSubBuildingName(), searchString)) ||
                    (pafData.getBuildingName() != null && StringUtils.containsIgnoreCase(pafData.getBuildingName(), searchString)) ||
                    (pafData.getBuildingNumber() != null && pafData.getBuildingNumber().equalsIgnoreCase(searchString)) ||
                    StringUtils.containsIgnoreCase(pafData.getOrganisationName(), searchString) ||
                    StringUtils.containsIgnoreCase(pafData.getDepartmentName(), searchString);
        }
        else
        {
            // paf data is not present, so perform a cruder search using the actual address data
            // the building name or number will always be on the first two lines
            return  StringUtils.containsIgnoreCase(addressLine1, searchString) ||
                    StringUtils.containsIgnoreCase(addressLine2, searchString);
        }

    }

    /**
     * toString() method generated by IntelliJ GenerateToString plugin.
     *
     * @return A String representation of this instance.
     */
    public String toString() {
        return "AbstractAddress{" + "addressLine1='" + addressLine1 + '\'' + ", addressLine2='" + addressLine2 + '\'' +
                ", postcode='" + postcode + '\'' + '}';
    }
}

