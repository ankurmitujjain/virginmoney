package com.virginmoney.addresslookup.business;

import org.apache.log4j.Logger;

/**
 * Represents a 'complex' address, which includes the basic address information plus a {@link com.virginmoney.addresslookup.business.PAFData} object
 * containing additional information.
 *
 * @author woodsn
 *         <p/>
 *         Copyright     :  Virgin Money Ltd.
 */
public class AddressStyle1 extends AbstractAddress {

    private static Logger logger = Logger.getLogger(AddressStyle1.class);

    private String addressLine3;
    private String addressLine4;

    /**
     * Constructs a 4-line address from preformatted data.
     *
     * @param addressLine1 address line 1.
     * @param addressLine2 address line 2.
     * @param addressLine3 address line 3.
     * @param addressLine4 address line 4.
     * @param postcode     postcode.
     */
    public AddressStyle1(AddressSearchParameters searchParameters,
                         String addressLine1,
                         String addressLine2,
                         String addressLine3,
                         String addressLine4,
                         String postcode)
    {
        super(searchParameters,addressLine1, addressLine2, postcode);
        this.addressLine3 = addressLine3;
        this.addressLine4 = addressLine4;
    }
    /**
     * Constructs an address from preformatted data.
     *
     * @param addressLine1 address line 1.
     * @param addressLine2 address line 2.
     * @param addressLine3 address line 3.
     * @param addressLine4 address line 4.
     * @param postcode     postcode.
     * @param pafData unformatted PAF Address data.
     */
    public AddressStyle1(AddressSearchParameters searchParameters,
                         String addressLine1,
                         String addressLine2,
                         String addressLine3,
                         String addressLine4,
                         String postcode,
                         PAFData pafData)
    {
        this(searchParameters,addressLine1,addressLine2,addressLine3,addressLine4,postcode);
        this.pafData = pafData;
    }

    public String getAddressLine3() {
        return addressLine3;
    }

    public String getAddressLine4() {
        return addressLine4;
    }

    /**
     * Returns a 'picklist' entry for this address containing the address in a single line.
     * @return a 'picklist' entry for this address containing the address in a single line.
     */
    public String getPicklistEntry() {
        // populate the picklist entry

        StringBuffer buffer = new StringBuffer();
        buffer.append("");

        appendToBuffer(buffer, getAddressLine1());
        appendToBuffer(buffer, getAddressLine2());
        appendToBuffer(buffer, getAddressLine3());
        appendToBuffer(buffer, getAddressLine4());
        appendToBuffer(buffer, getPostcode());

        return buffer.toString();
    }

    /**
     * toString() method generated by IntelliJ GenerateToString plugin.
     *
     * @return A String representation of this instance.
     */
    public String toString() {
        return "Address{" + "addressLine1='" + addressLine1 + '\'' + ", addressLine2='" + addressLine2 + '\'' +
                ", addressLine3='" + addressLine3 + '\'' + ", addressLine4='" + addressLine4 + '\'' + ", postcode='" +
                postcode + '\'' + ", pafData=" + pafData + '}';
    }
}

