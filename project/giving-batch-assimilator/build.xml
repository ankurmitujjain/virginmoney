<?xml version="1.0"?>
<project name="giving-batch-controller" basedir="." default="build">

    <!--

    Standard Ant Build file for Virgin Money projects
    =======================================================

    Function
    ========

        This script acts as a default build file to use for new projects. It makes use of the default ant targets provided in
        /dev/common/antscripts.


    To use this script
    ==================

        1. Take a copy of this file and put it in your own project directory.

        2. Change the project name to reflect your own project
        
        3. Change the war.name to reflect your own project

        3. The wsdl-gen-exampleservice target needs to be changed to reflect your own project

        4. the required.libraries needs to be changed to the libraries you're using (I've just provided a base set)

        5. The create-war target has a base set of libraries included. Amend this to suit your project.
        
        6. The create-database-schema target should work by default if the hibernate files are in 
        	${web.conf.main.dir}/WEB-INF/classes/. It will also need a hibernate.dialect set in hibernate.properties


    -->


    <!-- user-specific properties -->
    <property file="${user.home}/etc/env.build.properties" />

    <!-- import the build file which predefines all the standard properties-->
    <property name="antscripts.dir" value="${env.dev.root.dir}/common/antscripts"/>
    <property file="${antscripts.dir}/common.build.properties" />
    
    <!-- import all the thirdparty library definitions -->
    <property name="common.library.dir" value="${env.dev.root.dir}/thirdparty/libraries" />
    <property file="${common.library.dir}/common.libraries.properties" />
    
    <property name="war.name" value="giving-batch-assimilator"/>

    <property name="jar.name" value="giving-batch-assimilator"/>
    
    <!-- import vm deployment and jboss control -->
    <import file="${antscripts.dir}/ant-vm-deployment.xml" />
    
    <property name="deploy.exploded.dir" value="${deploy.dir}/exploded/${war.name}"/>
    <property name="pages.dir" value="${basedir}/pages"/>
    <property name="lib.dir" value="${basedir}/lib"/>
	

    <!-- libraries required by the project. This is a base set of libraries that can be added/amended accordingly where appropriate -->
    <path id="required.libraries">
		<fileset dir="${jboss.lib}">
			<include name="**/*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${hibernate.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${commons-lang.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${commons-logging.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${commons-beanutils.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${commons-collections.lib}">
			<include name="*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${spring256.lib}">
			<include name="**/*.jar" />
			<exclude name="**/*log4j*.*" />
		</fileset>
		<fileset dir="${log4j.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${joda-time.lib}">
					<include name="**/*.jar" />
		</fileset>
		<fileset dir="${springintegration102.lib}">
		     <include name="*.jar"/>
		 </fileset>    </path>


    <!-- master classpath - includes common libraries and configuration elements-->
     <path id="master.classpath">
         <path refid="required.libraries" />
         <pathelement path="${build.main.dir}"/>
         <pathelement path="${web.conf.main.dir}"/>
     </path>

     <!-- test classpath - includes common libraries and configuration elements plus test version of configuration elements -->
     <path id="test.classpath">
     	 <path refid="required.libraries" />
         <pathelement path="${web.conf.test.dir}"/>
         <pathelement path="${build.test.dir}"/>
         <path refid="master.classpath" />
        <fileset dir="${junit.home}">
            <include name="**/*.jar" />
            <exclude name="**/*log4j*.*" />
        </fileset>         	
     </path>


     <!-- builds and tests the project -->
     <target name="build" depends="build-no-tests, test-all, javadoc"/>

     <target name="build-no-tests" depends="clean, assert-dependencies, compile, create-jar" description="builds the project without tests"/>

     <target name="deploy-local-jboss" depends="build-no-tests,test-all" description="Deploy application to local web server">
     	<!-- jboss.local.deploy.dir should be defined in your local env.build.properties-->
        <copy verbose="${verbose}" file="${deploy.dir}/${war.name}.war" todir="${jboss.local.deploy.dir}"
        	preservelastmodified="false">
        </copy>
     </target>
     
     <target name="deploy-local-jboss-no-tests" depends="build-no-tests" description="Deploy application to local web server">
        <copy verbose="${verbose}" file="${deploy.dir}/${war.name}.war" todir="${jboss.local.deploy.dir}"
        	preservelastmodified="false">
        </copy>
     </target>

    <target name="clean" depends="clean-dist" description="Clean out the build and deployment directories">
        <ant antfile="${antscripts.dir}/ant-clean.xml" inheritall="true" inheritrefs="true" />
    </target>

	<target name="clean-dist" description="Clean out the distribution directory">
		<delete dir="${distribution.dir}" failonerror="false" />
	</target>	

    <target name="compile" description="Compiles all source java files">
         <ant antfile="${antscripts.dir}/ant-compile.xml" inheritall="true" inheritrefs="true" />
    	
    	<copy verbose="${verbose}" todir="${build.main.dir}" preservelastmodified="false">
			<fileset dir="${src.main.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
    	
    </target>

    <target name="create-jar" description="This target creates the deployable JAR file">
		<mkdir dir="${deploy.dir}" />
    	<copy verbose="${verbose}" todir="${build.main.dir}" preservelastmodified="false">
			<fileset dir="${conf.main.dir}/WEB-INF/resources">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<jar destfile="${deploy.dir}/${jar.name}.jar">
			<!--
				include the main config entries but not the test ones note log4j.xml
				should be placed in con/main/web-inf classes in the project
			-->
			<zipfileset dir="${build.main.dir}">
				<include name="**/*.*" />
				<exclude name="**/*.jar" />
			</zipfileset>
		</jar>
	</target>
    
    <!-- A base create-war target. Will need to be amended to include/exclude the relevant libraries.
         A base set of libraries has been included by default -->
     <target name="create-war" description="This target creates the deployable WAR file">
     	
     	<mkdir dir="${deploy.dir}"/>
         <war  destfile="${deploy.dir}/${war.name}.war" webxml="${conf.main.dir}/WEB-INF/web.xml">
            <!-- take all the compiled code from the build folder, but not the test code -->
            <classes dir="${build.main.dir}"/>
            <!--<classes dir="${build.generated.dir}"/>-->

            <!-- include the main config entries but not the test ones -->
            <zipfileset  dir="${conf.main.dir}">
                <include name="**/*.*"/>
            		<exclude name="**/*.jar" />
                <exclude name="web.xml"/> <!-- already referenced above -->
            </zipfileset>
        </war>
    </target>

	<target name="test-all">
		<if>
			<not><equals arg1="${skip.tests}" arg2="true"/></not>
			<then>
      	<if>
      		<not><equals arg1="${skip.cobertura}" arg2="true"/></not>
					<then>
		        <antcall target="test-cobertura"/>
					</then>
					<else>
						<echo message="Property 'skip.cobertura' is set to true, skipping cobertura processing"/>
		        <antcall target="test-junit"/>
					</else>
				</if>
	      <antcall target="test-checkstyle"/>
			</then>	
			<else>
				<echo message="Property 'skip.tests' is set to true, skipping tests"/>
			</else>
		</if>
	</target>

	<target name="test-cobertura" description="Runs the Junit tests with Cobertura analysis" depends="compile" unless="skip.cobertura">
		<ant antfile="${antscripts.dir}/ant-cobertura.xml" inheritall="true" inheritrefs="true">
		</ant>
	</target>

	<target name="test-junit" description="Runs the Junit tests" depends="compile" unless="skip.tests">
		<ant antfile="${antscripts.dir}/ant-junit.xml" inheritall="true" inheritrefs="true" />
	</target>

	<target name="test-checkstyle" description="Runs checkstyle over the source to check the coding standards" unless="skip.checkstyle">
		<ant antfile="${antscripts.dir}/ant-checkstyle.xml" inheritall="true" inheritrefs="true" />
	</target>

	<target name="test-qalab" description="Runs qalab against the test results to record the metrics" unless="skip.qalab">
		<ant antfile="${antscripts.dir}/ant-qalab.xml" inheritall="true" inheritrefs="true" />
	</target>

	<target name="test-findbugs" description="Runs findbugs over the source to check the coding bugs" unless="skip.findbugs">
		<ant antfile="${antscripts.dir}/ant-findbugs.xml" inheritall="true" inheritrefs="true" />
	</target>


	<!-- work around issue of trying to run javadoc against test sources when we have none -->
	<target name="javadoc-prepare">
		<ant antfile="${antscripts.dir}/ant-javadoc.xml" target="javadoc-prepare" inheritall="true" inheritrefs="true" />
	</target>

	<target name="javadoc" description="Runs Javadoc" depends="javadoc-prepare" unless="skip.javadoc">
		<ant antfile="${antscripts.dir}/ant-javadoc.xml" target="javadoc-from-sourcepath" inheritall="true" inheritrefs="true">
			<property name="javadoc.title" value="${ant.project.name}" />
			<property name="javadoc.verbose" value="true" />
		</ant>
	</target>
    
   <target name="echoproperties">
        <echo message="=============================================================================================="  />
        <echo message=" Start of properties for project : '${ant.project.name}'"  />
        <echo message="                         basedir : '${basedir}' "  />
        <echo message="                        ant file : '${ant.file}'"  />
        <echo message="=============================================================================================="  />
        <echoproperties/>
        <echo message="=============================================================================================="  />
        <echo message=" End of properties for project : '${ant.project.name}' "  />
        <echo message="=============================================================================================="  />
    </target>


	<!-- BUILD DISTRIBUTION BUNDLE -->

	<!-- We have no dist, so just build instead -->
	<target name="dist" depends="build" description="Build the project's distribution bundle, which for this project is just a JAR" />

    
	<!-- we're just a JAR project so simply check for the presence of it -->

	<target name="check-deployment">
		<available file="${deploy.dir}/${jar.name}.jar" property="jar.available" />
		<if>
			<isset property="jar.available" />
			<then>
				<echo message="Project JAR '${jar.name}' available" />
			</then>
			<else>
				<echo message="Project JAR '${jar.name}' not available" />
			</else>
		</if>
	</target>

	<target name="assert-deployment" depends="check-deployment">
		<fail message="Project JAR '${jar.name}' not found" unless="jar.available" />
	</target>

</project>
