<?xml version="1.0"?>
<project name="ant-cobertura" default="cobertura">

    <!--

    Standard Ant task to run cobertura for Virgin Money projects
    ============================================================
    
     Function
     ========

        This script peforms a default execution of cobertura against the 'main' source trees, and excludes all test source code and
        code generated by wsimport.
    
        It is configurable, however if you need to do something significantly different it is recommended that you do not use this script 
        and create your own version instead.


    To use this script
    ==================

        1. include the file common.build.properties from this folder into your local build file (see
           the common.build.properties file for details on how to do this). 
           
           This will import standard definitions for all properties needed, including the ${antscripts.dir} referenced below


        2. create a task in your own ant buildscript like this :-

          <target name="cobertura" description="Runs cobertura over the source to check the coding standards">
               <ant antfile="${antscripts.dir}/ant-cobertura.xml" inheritall="true"   inheritrefs="true"/>
          </target>


    Optional parameters
    ===================


         1. filesets to be analysed

            It is possible to override the default fileses which are executed by creating locally-named ones in the calling script
            and then setting parameters named "cobertura-instrument-fileset-id" and "cobertura-report-fileset-id" to the names
            of the filesets you have defined. See ant-junit for more explanation. Note that the parameters names must be a shown here,
            but the fileset ids must be different



    -->

    <!--
      re-include the common properties file as it reduces undefined property problems in Intellij
      the only side-effect is that properties will only be overriden if they are specified inside the ant task, ie
      <ant antfile=""><property name="" value=""></ant>
     -->
    <property file="common.build.properties"/>

    <fileset id="cobertura-instrument-default-fileset" dir="${build.main.dir}">
            <!-- the default fileset for the 'instrument' stage. DO NOT change this without good reason; instead, define a new
                 fileset wwith a different name IN YOUR OWN ANT SCRIPT and set the property "cobertura-instrument-fileset-id"
                 to contain its name
            -->
        <include name="**/*.class" />
        <exclude name="**/messages/**/*.class" />
        <exclude name="**/Test*.class" />
    </fileset>

    <!-- names the fileset to be used in the 'instrument' stage. You can override the value of this in the calling script -->
    <property name= "cobertura-instrument-fileset-id" value="cobertura-instrument-default-fileset"/>

    <fileset id="cobertura-report-default-fileset"  dir="${src.main.dir}">
        <!-- the default fileset for the 'report' stage. DO NOT change this without good reason; instead, define a new
             fileset with a different name IN YOUR OWN ANT SCRIPT and set the property "cobertura-report-fileset-id"
             to contain its name
        -->
        <include name="**/*.java" />
    </fileset>

    <!-- names the fileset to be used in the 'report' stage. You can override the value of this in the calling script -->
    <property name="cobertura-report-fileset-id" value="cobertura-report-default-fileset"/>

    <!-- Cobertura expects log4j to be on the classpath for its 'own' tasks, but as log4j is generally already on
        the 'test' classpath we have two path definitions, with and without log4j.

        Doing this allows log4j output to be captured correctly if the calling script has set up log4j logging as
        part of its junit / cobertura testing.  Without this we get a log4j conflict which suppresses most of the
        log4j output.
        -->
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="**/*.jar" />
            <exclude name="**/log4j*" />
        </fileset>
    </path>
    <path id="cobertura.classpath.with.log4j">
        <path refid="cobertura.classpath"/>
        <fileset dir="${log4j.lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Task definition - the properties file is in the cobertura jar file -->
    <taskdef classpathref="cobertura.classpath.with.log4j" resource="tasks.properties" />


    <target name="cobertura" description="Run cobertura code coverage">
        <delete dir="${cobertura.results.dir}" />
        <echo message="ant-cobertura.xml : cobertura :     cobertura-report-fileset-id=${cobertura-report-fileset-id}"/>
        <echo message="ant-cobertura.xml : cobertura : cobertura-instrument-fileset-id=${cobertura-instrument-fileset-id}"/>
        <echo message="ant-cobertura.xml : cobertura :                  results folder=${cobertura.results.dir}"/>
        <echo message="ant-cobertura.xml : cobertura :             instrumented folder=${cobertura.instrumented.dir}"/>
        <echo message="ant-cobertura.xml : cobertura :                        datafile=${cobertura.datafile}"/>


        <cobertura-instrument todir="${cobertura.instrumented.dir}" datafile="${cobertura.datafile}">
            <ignore regex="org.apache.log4j.*" />
            <fileset refid="${cobertura-instrument-fileset-id}"/>

        </cobertura-instrument>

        <!-- now call junit -->
        <echo message="ant-cobertura.xml : cobertura :  calling junit"/>
        <ant antfile="${antscripts.dir}/ant-junit.xml" target="junit-cobertura" inheritall="true" inheritrefs="true"/>

        <echo message="ant-cobertura.xml : cobertura :  calling cobertura-report"/>
        <!-- it calls itself to force the inherited properties and  references to be picked up correctly -->
        <ant antfile="${antscripts.dir}/ant-cobertura.xml"  target="cobertura-report" inheritall="true" inheritrefs="true" />

        <echo message="ant-cobertura.xml : cobertura :  finished"/>

    </target>

    <target name="cobertura-instrument-only" description="Run cobertura code coverage">
        <delete dir="${cobertura.instrument.dir}" />
        <echo message="ant-cobertura.xml : cobertura :     cobertura-report-fileset-id=${cobertura-report-fileset-id}"/>
        <echo message="ant-cobertura.xml : cobertura : cobertura-instrument-fileset-id=${cobertura-instrument-fileset-id}"/>
        <echo message="ant-cobertura.xml : cobertura :                  results folder=${cobertura.results.dir}"/>
        <echo message="ant-cobertura.xml : cobertura :             instrumented folder=${cobertura.instrumented.dir}"/>
        <echo message="ant-cobertura.xml : cobertura :                        datafile=${cobertura.datafile}"/>

        <cobertura-instrument todir="${cobertura.instrumented.dir}" datafile="${cobertura.datafile}">
            <ignore regex="org.apache.log4j.*" />
            <fileset refid="${cobertura-instrument-fileset-id}"/>

        </cobertura-instrument>
        <echo message="ant-cobertura.xml : cobertura-instrument-only :  finished"/>

    </target>

    <target name="cobertura-report"
    description="Create the cobertura report - don't call directly as its called by the main cobertura task">
        <echo message="ant-cobertura.xml : cobertura-report :    cobertura-report-fileset-id=${cobertura-report-fileset-id}"/>
        <echo message="ant-cobertura.xml : cobertura-report : cobertura-instrument-fileset-id=${cobertura-instrument-fileset-id}"/>
        <echo message="ant-cobertura.xml : cobertura-report :                  results folder=${cobertura.results.dir}"/>
        <echo message="ant-cobertura.xml : cobertura-report :                        datafile=${cobertura.datafile}"/>
        <echo message="ant-cobertura.xml : cobertura-report :      report writing html to dir=${cobertura.results.dir}/results "/>

        <cobertura-report format="html" destdir="${cobertura.results.dir}/results" datafile="${cobertura.datafile}">
            <fileset refid="${cobertura-report-fileset-id}"/>

        </cobertura-report>

        <!-- Generate the XML report for qalab to grok -->
        <echo message="ant-cobertura.xml : cobertura-report : report writing xml to ${cobertura.results.dir}/results-xml "/>
        <cobertura-report format="xml" destdir="${cobertura.results.dir}/results-xml" datafile="${cobertura.datafile}">
            <fileset refid="${cobertura-report-fileset-id}"/>
        </cobertura-report>
        <echo message="ant-cobertura.xml : cobertura-report : finished"/>
    </target>

    <target name="list-fileset-content" description="lists all the files in the 'instrumented' and 'report' filesets">
        <property name="instrumentfiles" refid="${cobertura-instrument-fileset-id}"/>
        <echo message="========================================================="/>
        <echo message="ant-cobertura.xml : list-fileset-content :   instrumentfiles=${instrumentfiles} "/>
        <echo message="========================================================="/>

        <property name="reportfiles" refid="${cobertura-report-fileset-id}"/>
        <echo message="========================================================="/>
        <echo message="ant-cobertura.xml : list-fileset-contentt :      reportfiles=${reportfiles} "/>
        <echo message="========================================================="/>

    </target>

</project>
